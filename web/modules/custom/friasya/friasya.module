<?php

use Drupal\node\Entity\Node;

/**
 * Implementa hook_entity_insert().
 */
function friasya_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  // Verificar tipo de contenido.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'transaccion') {

    // Validar campo de producto.
    if (!$entity->hasField('field_producto') || $entity->get('field_producto')->isEmpty()) {
      \Drupal::logger('friasya')->warning('Transacción sin producto asociado.');
      return;
    }

    // Obtener ID del producto.
    $producto_nid = $entity->get('field_producto')->target_id;
    $producto = Node::load($producto_nid);

    if (!$producto || $producto->bundle() !== 'producto') {
      \Drupal::logger('friasya')->warning('Producto con NID @nid no válido.', ['@nid' => $producto_nid]);
      return;
    }

    // Obtener cantidad.
    $cantidad = 1;
    if ($entity->hasField('field_cantidad') && !$entity->get('field_cantidad')->isEmpty()) {
      $cantidad_valor = (int) $entity->get('field_cantidad')->value;
      if ($cantidad_valor > 0) {
        $cantidad = $cantidad_valor;
      }
    }

    // Validar y actualizar el stock.
    if ($producto->hasField('field_stock') && !$producto->get('field_stock')->isEmpty()) {
      $stock_actual = (int) $producto->get('field_stock')->value;
      $nuevo_stock = max(0, $stock_actual - $cantidad);
      $producto->set('field_stock', $nuevo_stock);
      $producto->save();

      \Drupal::logger('friasya')->notice('Stock del producto @nid actualizado de @actual a @nuevo.', [
        '@nid' => $producto_nid,
        '@actual' => $stock_actual,
        '@nuevo' => $nuevo_stock,
      ]);
    }
    else {
      \Drupal::logger('friasya')->warning('El producto @nid no tiene field_stock configurado.', ['@nid' => $producto_nid]);
    }
  }
}

