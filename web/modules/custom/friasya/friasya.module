<?php

use Drupal\node\Entity\Node;

/**
 * Implementa hook_entity_insert().
 */
function friasya_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'transacion') {
    \Drupal::logger('friasya')->notice('hook_entity_insert ejecutado para transacion.');

    // Validar que el campo de referencia exista y tenga valor.
    if (!$entity->hasField('field_productos') || $entity->get('field_productos')->isEmpty()) {
      \Drupal::logger('friasya')->warning('Transacion sin producto asociado.');
      return;
    }

    // Cargar el nodo producto.
    $producto_nid = $entity->get('field_productos')->target_id;
    $producto = Node::load($producto_nid);

    // Validaciones seguras.
    if (!$producto) {
      \Drupal::logger('friasya')->warning('Producto no encontrado: @nid', ['@nid' => $producto_nid]);
      return;
    }

    if (!($producto instanceof \Drupal\node\Entity\Node)) {
      \Drupal::logger('friasya')->warning('Entidad cargada no es un nodo válido: @nid', ['@nid' => $producto_nid]);
      return;
    }

    if ($producto->bundle() !== 'p') {
      \Drupal::logger('friasya')->warning('El nodo @nid no es del tipo p.', ['@nid' => $producto_nid]);
      return;
    }

    // Obtener cantidad.
    $cantidad = 1;
    if ($entity->hasField('field_cantidad') && !$entity->get('field_cantidad')->isEmpty()) {
      $valor = (int) $entity->get('field_cantidad')->value;
      if ($valor > 0) {
        $cantidad = $valor;
      }
    }

    \Drupal::logger('friasya')->notice('Producto NID: @nid - Cantidad: @cantidad', [
      '@nid' => $producto_nid,
      '@cantidad' => $cantidad,
    ]);

    // Actualizar el stock.
    if ($producto->hasField('field_stock') && !$producto->get('field_stock')->isEmpty()) {
      $stock_actual = (int) $producto->get('field_stock')->value;
      $nuevo_stock = max(0, $stock_actual - $cantidad);

      \Drupal::logger('friasya')->notice('Stock actual del producto @nid: @stock', [
        '@nid' => $producto_nid,
        '@stock' => $stock_actual,
      ]);

      $producto->set('field_stock', $nuevo_stock);
      $producto->save();

      \Drupal::logger('friasya')->notice('Stock actualizado a @nuevo para producto @nid', [
        '@nuevo' => $nuevo_stock,
        '@nid' => $producto_nid,
      ]);
    }
    else {
      \Drupal::logger('friasya')->warning('El producto @nid no tiene field_stock o está vacío.', ['@nid' => $producto_nid]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function friasya_theme($existing, $type, $theme, $path) {
  return [
    'friasya_form_venta' => [
      'render element' => 'form',
      'template' => 'friasya-form-venta',
      'path' => \Drupal::service('extension.list.module')->getPath('friasya') . '/templates',
    ],
    'productos_disponibles' => [
      'variables' => ['productos' => []],
      'template' => 'productos-disponibles',
      'path' => \Drupal::service('extension.list.module')->getPath('friasya') . '/templates',
    ],
   'friasya_weekly_report' => [
      'variables' => ['productos' => NULL],
      'template' => 'friasya-weekly-report',
      'path' => \Drupal::service('extension.list.module')->getPath('friasya') . '/templates',
    ],
  ];
}

